scraps

lines = inFile.read().splitlines() 
for line in lines:
	if line[0] == '>':
		entryName = 
		print entryName
	else:
		reverse = reversed(line)
		reverseComplement = "".join(complement.get(base, base) for base in reverse)



lines = inFile.read().splitlines()
#print type(lines) 
for line in lines:
	print line
	if line[0] == '>':
		#Referenced from BioStars
		def fasta_iter(fasta_name):
			fh = open(fasta_name)
			dataBlock = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))
			for header in dataBlock:
			    # drop the ">"
			    header = header.next()[1:].strip()
			    print header
			    # join all sequence lines to one.
			    seq = "".join(s.strip() for s in dataBlock.next())
			    yield seq

		seqGen = fasta_iter(filename)
		seqList = list(seqGen)
		#print seqList
		#print(type(seq))

		reverse = reversed(seqList)
		reverseComplement = "".join(complement.get(base, base) for base in reverse)
		print reverseComplement

inFile.close()



------------
seqGen = fasta_iter(filename)
seqList = list(seqGen)
print seqList
#reverse = reversed(seqList)
#reverseComplement = "".join(complement.get(base, base) for base in reverse)
print reverseComplement

# lines = [line for line in inFile.readlines()]
# #print type(lines) 
# for line in lines:
# 	#print line
# 	if line[0] == '>':
# 		#Referenced from BioStars
# 		def fasta_iter(fasta_name):
# 			fh = open(fasta_name)
# 			dataBlock = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))
# 			for header in dataBlock:
# 			    # drop the ">"
# 			    header = header.next()[1:].strip()
# 			    print header
# 			    # join all sequence lines to one.
# 			    seq = "".join(s.strip() for s in dataBlock.next())
# 			    yield seq

# 		seqGen = fasta_iter(filename)
# 		seqList = list(seqGen)
# 		#print seqList
# 		#print(type(seq))

# 		reverse = reversed(seqList)
# 		reverseComplement = "".join(complement.get(base, base) for base in reverse)
# 		print reverseComplement








-----------
#! /usr/bin/python

#-------------------------------------------------------------------------------------
# This Python script returns the reverse complement of a sequence (either RNA or DNA) 
# by Gautam Machiraju, BioE 131 Fall 2015
#-------------------------------------------------------------------------------------

import sys
from itertools import groupby

#---------------------------
# Error Checking & Handling
#---------------------------

# Checking for a file input.
try:	
	inFile = open(sys.argv[1])  
except IOError:
	print "Error: file not found / no file input detected."
	sys.exit()
	

#Checkign if file input is of FASTA format.
filename = sys.argv[1]
if filename[-6:] != ".fasta":
	print "Error: cannot read file -- it is not of FASTA format."
	sys.exit()

#print sys.argv

# Reads in the 2nd input: the type of sequence (either RNA or DNA)
numVars = len(sys.argv)
if numVars == 2:
	print "Note: defaulting to DNA reverse complement."
elif (numVars == 3) and (sys.argv[3] != "rna"):
	print "Error: please enter a valid sequence type."
	sys.exit()


#--------------
# Main Routine
#--------------

# Defining a mapping library for the base complements and do the replacement
if (numVars == 3) and (sys.argv[3] == "rna"):
	complement = {'A':'U', 'U':'A', 'C':'G', 'G':'C'}
else: #default
	complement = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}

#Referenced from BioStars
def fasta_iter(fasta_name):
	fh = open(fasta_name)
	dataBlock = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))
	for header in dataBlock:
	    # drop the ">"
	    header = header.next()[1:].strip()
	    #print header
	    # join all sequence lines to one.
	    seq = "".join(s.strip() for s in dataBlock.next())
	    reverse = reversed(seq)
	    reverseComplement = "".join(complement.get(base, base) for base in reverse)
	    yield header, reverseComplement

seqGen = fasta_iter(filename)
seqList = list(seqGen)

for tup in seqList:
	for item in tup:
		print item

inFile.close()
